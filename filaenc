typedef struct nodo
{
    int assento;
    struct nodo * next;
}NODO;

typedef struct
{
    NODO *INICIO;
    NODO *FIM;
}DESCRITOR;

typedef DESCRITOR * FILA_ENC;
void cria_fila (FILA_ENC *);
int eh_vazia (FILA_ENC);
void ins (FILA_ENC, int assento);
int cons (FILA_ENC);
void ret (FILA_ENC);
int cons_ret (FILA_ENC);

void cria_fila (FILA_ENC *pf)
{
    *pf=(DESCRITOR *) malloc (sizeof(DESCRITOR));
    if (!pf)
    {
        printf("\nERRO! Memoria insuficiente!\n");
        exit(1);
    }
    (*pf)->INICIO=(*pf)->FIM=NULL;
}

int eh_vazia (FILA_ENC f)
{
    return (f->INICIO == NULL);
}

void ins (FILA_ENC f, int assento)
{
    NODO *novo;
    novo = (NODO *) malloc (sizeof(NODO));
    if (!novo)
    {
        printf("\nERRO! Memoria insuficiente");
        exit(1);
    }
    novo->assento = v;
    novo->next = NULL;
    if (eh_vazia(f))
        f->INICIO  = novo;
    else
        f->FIM->next = novo;
    f->FIM = novo;
}

int cons (FILA_ENC f)
{
    if (eh_vazia(f))
    {
        printf("\nERRO! Consulta em fila vazia!\n");
        exit(2);
    }
    else
        return(f->INICIO->assento);
}

void ret (FILA_ENC f)
{
    if (eh_vazia(f))
    {
        printf("\nERRO! Retirada em fila vazia!\n");
        exit(3);
    }
    else
    {
        NODO *aux = f->INICIO;
        f->INICIO = f->INICIO->next;
        if (!f->INICIO)
            f->FIM=NULL;
        free (aux);
    }
}

int cons_ret (FILA_ENC f)
{
    if(eh_vazia(f))
    {
        printf("\nERRO! Consulta e retirada em fila vazia!\n");
        exit(4);
    }
    else
    {
        int v = f->INICIO->assento;
        NODO *aux = f->INICIO;
        f->INICIO = f->INICIO->next;
        if(!f->INICIO)
            f->FIM=NULL;
        free(aux);
        return (v);
    }
}
